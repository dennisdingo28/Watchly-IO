generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EarlyUser {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  workspaces    Workspace[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Workspace {
  id             String          @id @default(cuid())
  name           String
  createdAt      DateTime        @default(now())
  apiKey         String          @unique
  roomId         String          @unique @default(cuid())
  userId         String
  routes         Route[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceUsers WorkspaceUser[]
}

model Route {
  pathname    String
  visited     Int       @default(1)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@id([pathname, workspaceId])
}

model WorkspaceUser {
  id             String              @id
  joinedAt       DateTime            @default(now())
  disconnectedAt DateTime?
  status         WorkspaceUserStatus @default(ONLINE)
  country        String
  countryCode    String
  platform       String
  workspaceId    String
  createdAt      DateTime            @default(now())
  Workspace      Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum WorkspaceUserStatus {
  ONLINE
  OFFLINE
}
